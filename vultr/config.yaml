---
- hosts: all
  tasks:
  - name: Change hostname to ansible host
    hostname:
      name: "k3s.{{ play_hosts[0] }}"
  - name: Copy hosts file
    template:
      src: ./templates/hosts.j2
      dest: /etc/hosts
      owner: root
      group: root
      mode: 0755
  - name: Download k3s binary x64
    get_url:
      url: https://github.com/rancher/k3s/releases/download/v0.6.1/k3s
      dest: /usr/local/bin/k3s
      owner: root
      group: root
      mode: 0755
  - name: Create k3s env file
    copy:
      content: ""
      dest: /etc/systemd/system/k3s.service.env

- hosts: master
  remote_user: root
  tasks:
  - name: Download linkerd binary x64
    get_url:
      url: https://github.com/linkerd/linkerd2/releases/download/stable-2.3.1/linkerd2-cli-stable-2.3.1-linux
      dest: /usr/local/bin/linkerd
      owner: root
      group: root
      mode: 0755
  - name: Copy over k3s system file
    copy:
      src: ./templates/k3s.service
      dest: /etc/systemd/system/k3s.service
      owner: root
      group: root
      mode: 0755
  - name: Enable and check K3s service
    systemd:
      name: k3s
      daemon_reload: yes
      state: restarted
      enabled: yes
  - name: Install the package "htpasswd"
    apt:
      name: apache2-utils=2.4.38-2ubuntu2
      force_apt_get: yes
  - name: Read node-token from master
    slurp:
      src: /var/lib/rancher/k3s/server/node-token
    register: node_token
  - name: Store Master node-token
    set_fact:
      token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
  - name: Create local directory for secrets
    local_action:
      module: file
      path: ../secrets
      state: directory
  - name: Save all facts locally
    local_action:
        module: copy
        content: "{{ vars | to_nice_json }}"
        dest: "../secrets/master_output.json"
  - name: Wait so other servers can connect
    command: k3s kubectl get nodes
    register: cmd_res
    retries: 100
    delay: 10
    until: cmd_res.stdout_lines | list | count == 4
  - name: Assign taint to entry node
    command: k3s kubectl label nodes k3s.entry type=entry
  - name: Load local auth file
    include_vars:
      file: ../secrets/auth.json
      name: auth
  - name: Generate auth file # With default username = user
    command: htpasswd -cbB ./auth user {{ auth.password }}
  - name: Copy kubernetes resource files
    copy:
      src: ../kube-resources/
      dest: ./kube-resources/
      directory_mode: yes
      owner: root
      group: root
      mode: 0755
  - name: Symlink k3s kubectl so linkerd can check it
    file:
      src: k3s
      dest: /usr/local/bin/kubectl
      state: link
  - name: Install linkerd
    shell: linkerd install | k3s kubectl apply -f -
    environment:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  - name: Wait for linkerd to finish installing # May take a while
    shell: linkerd check --expected-version $(linkerd version --client --short)
    environment:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  - name: Install resources
    shell: linkerd inject ./kube-resources | k3s kubectl apply -f -
    environment:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  - name: Create secrets needed by each ingress
    command: k3s kubectl create secret generic mysecret --from-file auth --namespace={{ item }}
    loop:
      - whoami
      - kube-system
      - linkerd
  - name: Delete output file
    local_action:
      module: file
      dest: ../secrets/master_output.json
      state: absent

- hosts: entry, worker
  remote_user: root
  tasks:
  - name: Wait for master to create output file
    local_action:
      module: wait_for
      path: ../secrets/master_output.json
  - name: Load master's output
    include_vars:
      file: ../secrets/master_output.json
      name: master_vars
  - name: Copy K3s service file
    template:
      src: ./templates/k3s-agent.service.j2
      dest: /etc/systemd/system/k3s-agent.service
      owner: root
      group: root
      mode: 0755
  - name: Copy K3s enviroment file
    template:
      src: ./templates/k3s-agent.service.env.j2
      dest: /etc/systemd/system/k3s-agent.service.env
      owner: root
      group: root
      mode: 0755
  - name: Enable and check K3s service
    systemd:
      name: k3s-agent
      state: restarted
      daemon_reload: yes
      enabled: yes
  - name: Wait for master to remove output, signalling clustering is finished
    local_action: # Another hack, required due to asyncrony of ansible
      module: wait_for
      path: ../secrets/master_output.json
      state: absent

- hosts: entry
  remote_user: root
  tasks:
  - name: Install the package "haproxy"
    apt:
      name: haproxy=1.8.19-1ubuntu1
      force_apt_get: yes
  - name: Configure haproxy
    copy: src=../haproxy/haproxy.cfg dest=/etc/haproxy/haproxy.cfg
    notify: Restart haproxy
  handlers:
    - name: Restart haproxy
      service:
        name: haproxy
        state: restarted

- hosts: worker
  remote_user: root
  tasks:
